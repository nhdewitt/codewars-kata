/*
The ludic numbers are a set of numbers related to prime numbers, as they are generated by sieving. Below is the method to generate such numbers.

Generation of ludic numbers:
First take the natural numbers starting from 2.
[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ...]
1 is the first ludic number -> Ludic = {1}.

Take the first element from the resulting array: 2.
Remove every 2nd indexed number.
[3, 5, 7, 9, 11, 13, 15, 17, 19 ...]
The first deleted number is 2 -> Ludic = {1, 2}.

Take the first element from the resulting array: 3.
Remove every 3rd indexed number.
[5, 7, 11, 13, 17, 19 ...]
The first deleted number is 3 -> Ludic = {1, 2, 3}.

Take the first element from the resulting array: 5.
Remove every 5th number.
[7, 11, 13, 19 ...]
The first deleted number is 5 -> Ludic = {1, 2, 3, 5}.

etc...
Write a function to return an integer: the sum of the first n ludic numbers.
You can assume that 1 ≤ n ≤ 10000.

Sample Tests:
sumLudic(1) -> 1
sumLudic(10) -> 107
sumLudic(25) -> 1100


https://www.codewars.com/kata/5d06b607e1021600183f64f7/train/go
*/

package kata

func deleteNthElement(sPtr *[]int, n int) {
  s := *sPtr
  
  removeCount := len(s) / n
  newCap := len(s) - removeCount
  newSlice := make([]int, 0, newCap)
  
  for i, v := range s {
    if i%n != 0 {
      newSlice = append(newSlice, v)
    }
  }
  *sPtr = newSlice
}

func SumLudic(n int) int {
  if n == 1 { return 1 }
  if n == 2 { return 3 }
  ludicCount := 2
  res := 3
  sieve := []int{}
  
  for i := 3; i <= 160000; i += 2 {
    sieve = append(sieve, i)
  }
  
  for ludicCount < n {
    ludicCount++
    check := sieve[0]
    res += check
    deleteNthElement(&sieve, check)
  }
  return res
}